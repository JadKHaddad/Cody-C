[package]
name = "cody-c"
version = "0.1.0"
edition = "2021"
authors = ["Jad K. Haddad <jadkhaddad@gmail.com>"]
license = "MIT OR Apache-2.0"
readme = "README.md"

[features]
default = [
    "decoder-checks",
    "codec",
    "iter",
    "futures",
    "embedded-io-async",
    # dev for now, TODO remove
    "futures-io",
    "tokio",
    "logging",
    "char-fmt",
    "tracing",
]
std = [
] # Implements std::error::Error for error types and enables std::io::Read compatibility
decoder-checks = [
] # If enabled, the framer will check the size of the frame generated by a decoder preventing panics or infinite loops
decode-enmpty-buffer = [
] # If enabled, the framer will attempt to decode an empty buffer. May be useful depending on the decoder implementation
codec = ["dep:heapless"] # Enables ready-to-use codec implementations
iter = [] # Implements core::iter::Iterator # TODO
futures = ["dep:futures"] # Implements futures::Stream and futures::Sink
futures-io = [
    "futures/std",
] # Enables futures::io::AsyncRead and futures::io::AsyncWrite compatibility
embedded-io-async = [
    "dep:embedded-io-async",
] # Enables embedded-io-async::Read and embedded-io-async::Write compatibility
embedded-io = [
    "dep:embedded-io",
] # Enables embedded-io::Read compatibility # TODO
tokio = [
    "dep:tokio",
    "dep:tokio-util",
    "futures-io",
] # Enables tokio::AsyncRead, tokio::AsyncWrite and tokio-util::codec compatibility
logging = [] # Enables logging
pretty-hex-fmt = [] # Only available with logging feature
char-fmt = [] # Only available with logging feature
log = [] # Enables logging with log crate # TODO
defmt = [
    "dep:defmt",
] # Enables logging with defmt crate and implements defmt::Format # TODO
tracing = [
    "dep:tracing",
] # Enables logging with tracing crate. Only available with logging feature

[dependencies]
pin-project-lite = "0.2.14"
heapless = { version = "0.8.0", optional = true }
futures = { version = "0.3.3", default-features = false, optional = true }
embedded-io-async = { version = "0.6.1", optional = true }
embedded-io = { version = "0.6.1", optional = true }
tokio = { version = "1.37.0", optional = true, default-features = false, features = [
    "io-util",
] }
tokio-util = { version = "0.7.11", optional = true, default-features = false, features = [
    "codec",
] }
tracing = { version = "0.1.40", optional = true }
defmt = { version = "0.3.6", optional = true }

[dev-dependencies]
tokio = { version = "1", features = ["full"] }
tokio-util = { version = "0.7.11", features = ["codec"] }
tokio-test = "0.4.4"
tracing = { version = "0.1.40", default-features = false }
tracing-subscriber = { version = "0.3.18", features = ["env-filter"] }
futures = "0.3.3"
criterion = { version = "0.5", features = ["html_reports"] }

[[bench]]
name = "async_read_lines"
harness = false

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

# cargo test --features "futures, codec, tokio" # will test stream, sink and codec. 
# tokio will bring `AsyncReadCompat` into scope for the duplex
# futures will bring stream and sink into scope
# codec will bring codec into scope
# DO NOT RUN: cargo test --all-features (defmt will not compile)
