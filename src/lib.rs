//! # Cody the codec
//!
//! A simple and fast codec for encoding and decoding data in `no_std` environments.
//!
//! ## Features
//! - `codec`: Provides a ready to use set of codecs: `AnyDelimiterCodec`, `BytesCodec` and `LinesCodec`.
//! - `std`: Implements [`std::error::Error`](https://doc.rust-lang.org/stable/std/error/trait.Error.html) for error types and enables [`std::io::Read`](https://doc.rust-lang.org/stable/std/io/trait.Read.html) compatibility. `(not Implemented yet)`
//! - `decoder-checks`: If enabled, the framer will check the promissed frame size, if no frame could be decoded, and the size of the frame generated by a decoder preventing panics or infinite loops.
//! - `decode-enmpty-buffer`: If enabled, the framer will attempt to decode an empty buffer. May be useful depending on the decoder implementation. Otherwise, the framer will early return `Ok(None)` if the buffer is empty.
//! - `buffer-early-shift`: If enabled, the framer will shift the buffer on the first unsuccessful decode attempt, otherwise it will shift the buffer in `buffer.len()` is reached.
//! - `encoder-checks`: If enabled, the framer will check the size of the frame written by an encoder preventing panics.
//! - `futures-io`: Enables [`futures::io::AsyncRead`](https://docs.rs/futures/latest/futures/io/trait.AsyncRead.html) and [`futures::io::AsyncWrite`](https://docs.rs/futures/latest/futures/io/trait.AsyncWrite.html) compatibility.
//! - `embedded-io-async`: Enables [`embedded_io_async::Read`](https://docs.rs/embedded-io-async/latest/embedded_io_async/trait.Read.html) and [`embedded_io_async::Write`](https://docs.rs/embedded-io-async/latest/embedded_io_async/trait.Write.html) compatibility.
//! - `embedded-io`: Enables [`embedded_io::Read`](https://docs.rs/embedded-io/latest/embedded_io/trait.Read.html) and [`embedded_io::Write`](https://docs.rs/embedded-io/latest/embedded_io/trait.Write.html) compatibility. `(not Implemented yet)`.
//! - `tokio`: Enables [`tokio::io::AsyncRead`](https://docs.rs/tokio/latest/tokio/io/trait.AsyncRead.html) and [`tokio::io::AsyncWrite`](https://docs.rs/tokio/latest/tokio/io/trait.AsyncWrite.html) compatibility.
//! - `logging`: Enables debug logging.
//! - `pretty-hex-fmt`: Enables pretty hex formatting for logging. Only available with `logging` feature.
//! - `char-fmt`: Enables char formatting for logging. Only available with `logging` feature.
//! - `log`: Enables logging with [`log`](https://docs.rs/log/latest/log/). `(not Implemented yet)`. Only available with `logging` feature.
//! - `defmt`: Enables logging with [`defmt`](https://docs.rs/defmt/latest/defmt/). `(not Implemented yet)`. Only available with `logging` feature. Implements [`defmt::Format`](https://docs.rs/defmt/latest/defmt/trait.Format.html) for crate types.
//! - `tracing`: Enables logging with [`tracing`](https://docs.rs/tracing/latest/tracing/). Only available with `logging` feature.
//!

#![cfg_attr(not(feature = "std"), no_std)]
#![deny(unsafe_code)]
// #![deny(missing_docs)]
#![cfg_attr(docsrs, feature(doc_cfg))]

pub mod decode;
pub mod encode;

pub mod prelude;
pub use prelude::*;

#[cfg(feature = "codec")]
#[cfg_attr(docsrs, doc(cfg(feature = "codec")))]
pub mod codec;

#[cfg(feature = "futures-io")]
#[cfg_attr(docsrs, doc(cfg(feature = "futures-io")))]
pub mod futures_io;

#[cfg(feature = "embedded-io-async")]
#[cfg_attr(docsrs, doc(cfg(feature = "embedded-io-async")))]
pub mod embedded_io_async;

#[cfg(any(test, feature = "tokio"))]
#[cfg_attr(docsrs, doc(cfg(feature = "tokio")))]
pub mod tokio;

#[cfg(all(
    feature = "logging",
    any(feature = "log", feature = "defmt", feature = "tracing")
))]
#[cfg_attr(
    docsrs,
    doc(cfg(all(
        feature = "logging",
        any(feature = "log", feature = "defmt", feature = "tracing")
    )))
)]
pub mod logging;

#[cfg(test)]
mod test;
